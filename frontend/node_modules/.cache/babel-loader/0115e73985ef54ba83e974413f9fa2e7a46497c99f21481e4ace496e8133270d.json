{"ast":null,"code":"// src/utils/helpers.js\n\n/**\n * Generates a random alphanumeric shortcode.\n * @param {number} length The desired length of the shortcode. Defaults to 6.\n * @returns {string} The generated shortcode.\n */\nexport function generateShortcode(length = 6) {\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let result = \"\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n/**\n * Logs an event to the console (and potentially other logging services in a real app).\n * @param {string} message The message to log.\n * @param {string} level The log level (e.g., \"info\", \"warn\", \"error\").\n */\nexport function logEvent(message, level = \"info\") {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);\n  // In a real application, you might send this to a backend logging service\n}","map":{"version":3,"names":["generateShortcode","length","characters","result","charactersLength","i","charAt","Math","floor","random","logEvent","message","level","timestamp","Date","toISOString","console","log","toUpperCase"],"sources":["/Users/anigaabhisathvikreddy/Downloads/frontend/src/utils/helpers.js"],"sourcesContent":["// src/utils/helpers.js\n\n/**\n * Generates a random alphanumeric shortcode.\n * @param {number} length The desired length of the shortcode. Defaults to 6.\n * @returns {string} The generated shortcode.\n */\nexport function generateShortcode(length = 6) {\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  let result = \"\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\n/**\n * Logs an event to the console (and potentially other logging services in a real app).\n * @param {string} message The message to log.\n * @param {string} level The log level (e.g., \"info\", \"warn\", \"error\").\n */\nexport function logEvent(message, level = \"info\") {\n  const timestamp = new Date().toISOString();\n  console.log(`[${timestamp}] [${level.toUpperCase()}] ${message}`);\n  // In a real application, you might send this to a backend logging service\n}"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,MAAM,GAAG,CAAC,EAAE;EAC5C,MAAMC,UAAU,GAAG,gEAAgE;EACnF,IAAIC,MAAM,GAAG,EAAE;EACf,MAAMC,gBAAgB,GAAGF,UAAU,CAACD,MAAM;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC/BF,MAAM,IAAID,UAAU,CAACI,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,gBAAgB,CAAC,CAAC;EAC3E;EACA,OAAOD,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,QAAQA,CAACC,OAAO,EAAEC,KAAK,GAAG,MAAM,EAAE;EAChD,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC1CC,OAAO,CAACC,GAAG,CAAC,IAAIJ,SAAS,MAAMD,KAAK,CAACM,WAAW,CAAC,CAAC,KAAKP,OAAO,EAAE,CAAC;EACjE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}